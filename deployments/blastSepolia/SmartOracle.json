{
  "address": "0x5B91C8E7a2DEABC623E6Ab34E8c26F27Cc18bC66",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gelatoMsgSender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pythContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "currentPrice",
      "outputs": [
        {
          "internalType": "int64",
          "name": "price",
          "type": "int64"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gelatoMsgSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int64",
              "name": "price",
              "type": "int64"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct SmartOracle.Price",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "updatePriceData",
          "type": "bytes[]"
        }
      ],
      "name": "updatePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xce8fbdfe48cb8656b89fbc968d8fd3578da0430304298639b18fe49b56ccfa7a",
  "receipt": {
    "to": null,
    "from": "0xB65540bBA534E88EB4a5062D0E6519C07063b259",
    "contractAddress": "0x5B91C8E7a2DEABC623E6Ab34E8c26F27Cc18bC66",
    "transactionIndex": 10,
    "gasUsed": "695192",
    "logsBloom": "0x
    "blockHash": "0xfe600bd7be9baf182b1fd6dc3bbccd56fe670bacd2320a8fb48c0d24a90256c8",
    "transactionHash": "0xce8fbdfe48cb8656b89fbc968d8fd3578da0430304298639b18fe49b56ccfa7a",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 1478998,
        "transactionHash": "0xce8fbdfe48cb8656b89fbc968d8fd3578da0430304298639b18fe49b56ccfa7a",
        "address": "0x5B91C8E7a2DEABC623E6Ab34E8c26F27Cc18bC66",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b65540bba534e88eb4a5062d0e6519c07063b259"
        ],
        "data": "0x",
        "logIndex": 37,
        "blockHash": "0xfe600bd7be9baf182b1fd6dc3bbccd56fe670bacd2320a8fb48c0d24a90256c8"
      }
    ],
    "blockNumber": 1478998,
    "cumulativeGasUsed": "2266942",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbB97656cd5fECe3a643335d03C8919D5E7DcD225",
    "0xA2aa501b19aff244D90cc15a4Cf739D2725B5729"
  ],
  "numDeployments": 1,
  "solcInputHash": "fc5efb94d9cf48b84661fe1fd9dbeab9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gelatoMsgSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pythContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelatoMsgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartOracle.Price\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updatePriceData\",\"type\":\"bytes[]\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SmartOracle.sol\":\"SmartOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0x949c65c65fea0578c09a6fc068e09ed1165adede2c835984cefcb25d76de1de2\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\",\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x95ff0a6d64517348ef604b8bcf246b561a9445d7e607b8f48491c617cfda9b65\",\"license\":\"Apache-2.0\"},\"contracts/SmartOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {IPyth} from \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport {PythStructs} from \\\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\\\";\\n\\n\\ncontract SmartOracle is Ownable, Pausable {\\n    using Counters for Counters.Counter;\\n    struct Price {\\n        int64 price;\\n        uint256 lastUpdateTimestamp;\\n    }\\n    IPyth private _pyth;\\n    Counters.Counter public tokenIds;\\n    address public immutable gelatoMsgSender;\\n    Price public currentPrice;\\n    address vrfCoordinatorV2;\\n    modifier onlyGelatoMsgSender() {\\n        require(\\n            msg.sender == gelatoMsgSender,\\n            \\\"Only dedicated gelato msg.sender\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        address _gelatoMsgSender,\\n        address pythContract\\n    ) {\\n        gelatoMsgSender = _gelatoMsgSender;\\n        _pyth = IPyth(pythContract);\\n    }\\n\\n\\n    /* solhint-disable-next-line no-empty-blocks */\\n    receive() external payable {}\\n\\n    function updatePrice(\\n        bytes[] memory updatePriceData\\n    ) external onlyGelatoMsgSender {\\n        uint256 fee = _pyth.getUpdateFee(updatePriceData);\\n        _pyth.updatePriceFeeds{value: fee}(updatePriceData);\\n        /* solhint-disable-next-line */\\n        bytes32 priceID = bytes32(\\n            0xc96458d393fe9deb7a7d63a0ac41e2898a67a7750dbd166673279e06c868df0a\\n        );\\n\\n        PythStructs.Price memory checkPrice = _pyth.getPriceUnsafe(priceID);\\n        currentPrice = Price(checkPrice.price, checkPrice.publishTime);\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function withdraw() external onlyOwner returns (bool) {\\n        (bool result, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        return result;\\n    }\\n\\n    function getPrice() public view returns (Price memory) {\\n        return currentPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x3314cbe04dc14cc1d70d3956f774078673e5b4ff3c232ab936c08f039ed75258\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610be0380380610be083398101604081905261002f916100d9565b6100383361006d565b6000805460ff60a01b191690556001600160a01b03918216608052600180546001600160a01b0319169190921617905561010c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100d457600080fd5b919050565b600080604083850312156100ec57600080fd5b6100f5836100bd565b9150610103602084016100bd565b90509250929050565b608051610ab261012e60003960008181610250015261029d0152610ab26000f3fe6080604052600436106100ab5760003560e01c80638456cb59116100645780638456cb59146101715780638da5cb5b1461018657806398d5fdca146101b85780639d1b464a14610206578063c54430821461023e578063f2fde38b1461027257600080fd5b80632592c0bf146100b75780633ccfd60b146100d95780633f4ba83a146101035780635c975abb14610118578063714cff5614610137578063715018a61461015c57600080fd5b366100b257005b600080fd5b3480156100c357600080fd5b506100d76100d23660046107f1565b610292565b005b3480156100e557600080fd5b506100ee6104c4565b60405190151581526020015b60405180910390f35b34801561010f57600080fd5b506100d761051e565b34801561012457600080fd5b50600054600160a01b900460ff166100ee565b34801561014357600080fd5b5060025461014e9081565b6040519081526020016100fa565b34801561016857600080fd5b506100d7610530565b34801561017d57600080fd5b506100d7610542565b34801561019257600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016100fa565b3480156101c457600080fd5b5060408051808201825260008082526020918201528151808301835260035460070b8082526004549183019182528351908152905191810191909152016100fa565b34801561021257600080fd5b506003546004546102249160070b9082565b6040805160079390930b83526020830191909152016100fa565b34801561024a57600080fd5b506101a07f000000000000000000000000000000000000000000000000000000000000000081565b34801561027e57600080fd5b506100d761028d36600461090a565b610552565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461030f5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c79206465646963617465642067656c61746f206d73672e73656e64657260448201526064015b60405180910390fd5b60015460405163d47eed4560e01b81526000916001600160a01b03169063d47eed459061034090859060040161093a565b602060405180830381865afa15801561035d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038191906109cc565b600154604051631df3cbc560e31b81529192506001600160a01b03169063ef9e5e289083906103b490869060040161093a565b6000604051808303818588803b1580156103cd57600080fd5b505af11580156103e1573d6000803e3d6000fd5b50506001546040516396834ad360e01b81527fc96458d393fe9deb7a7d63a0ac41e2898a67a7750dbd166673279e06c868df0a600482018190529450600093506001600160a01b0390911691506396834ad390602401608060405180830381865afa158015610454573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047891906109e5565b604080518082019091528151600781900b825260609092015160209091018190526003805467ffffffffffffffff191667ffffffffffffffff9093169290921790915560045550505050565b60006104ce6105cb565b604051600090339047908381818185875af1925050503d8060008114610510576040519150601f19603f3d011682016040523d82523d6000602084013e610515565b606091505b50909250505090565b6105266105cb565b61052e610625565b565b6105386105cb565b61052e600061067a565b61054a6105cb565b61052e6106ca565b61055a6105cb565b6001600160a01b0381166105bf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610306565b6105c88161067a565b50565b6000546001600160a01b0316331461052e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610306565b61062d61070d565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6106d261075d565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861065d3390565b600054600160a01b900460ff1661052e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610306565b600054600160a01b900460ff161561052e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610306565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156107e9576107e96107aa565b604052919050565b6000602080838503121561080457600080fd5b823567ffffffffffffffff8082111561081c57600080fd5b8185019150601f868184011261083157600080fd5b823582811115610843576108436107aa565b8060051b6108528682016107c0565b918252848101860191868101908a84111561086c57600080fd5b87870192505b838310156108fc5782358681111561088a5760008081fd5b8701603f81018c1361089c5760008081fd5b888101356040888211156108b2576108b26107aa565b6108c3828901601f19168c016107c0565b8281528e828486010111156108d85760008081fd5b828285018d83013760009281018c0192909252508352509187019190870190610872565b9a9950505050505050505050565b60006020828403121561091c57600080fd5b81356001600160a01b038116811461093357600080fd5b9392505050565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b838110156109be57888603603f1901855282518051808852835b81811015610997578281018a01518982018b0152890161097c565b508781018901849052601f01601f1916909601870195509386019391860191600101610962565b509398975050505050505050565b6000602082840312156109de57600080fd5b5051919050565b6000608082840312156109f757600080fd5b6040516080810167ffffffffffffffff8282108183111715610a1b57610a1b6107aa565b81604052845191508160070b8214610a3257600080fd5b9082526020840151908082168214610a4957600080fd5b5060208201526040830151600381900b8114610a6457600080fd5b6040820152606092830151928101929092525091905056fea26469706673582212202e01cd9462616fa997bc38e2845b7580bf787d9a2f1820ec07415491eea1b63564736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100ab5760003560e01c80638456cb59116100645780638456cb59146101715780638da5cb5b1461018657806398d5fdca146101b85780639d1b464a14610206578063c54430821461023e578063f2fde38b1461027257600080fd5b80632592c0bf146100b75780633ccfd60b146100d95780633f4ba83a146101035780635c975abb14610118578063714cff5614610137578063715018a61461015c57600080fd5b366100b257005b600080fd5b3480156100c357600080fd5b506100d76100d23660046107f1565b610292565b005b3480156100e557600080fd5b506100ee6104c4565b60405190151581526020015b60405180910390f35b34801561010f57600080fd5b506100d761051e565b34801561012457600080fd5b50600054600160a01b900460ff166100ee565b34801561014357600080fd5b5060025461014e9081565b6040519081526020016100fa565b34801561016857600080fd5b506100d7610530565b34801561017d57600080fd5b506100d7610542565b34801561019257600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016100fa565b3480156101c457600080fd5b5060408051808201825260008082526020918201528151808301835260035460070b8082526004549183019182528351908152905191810191909152016100fa565b34801561021257600080fd5b506003546004546102249160070b9082565b6040805160079390930b83526020830191909152016100fa565b34801561024a57600080fd5b506101a07f000000000000000000000000000000000000000000000000000000000000000081565b34801561027e57600080fd5b506100d761028d36600461090a565b610552565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461030f5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c79206465646963617465642067656c61746f206d73672e73656e64657260448201526064015b60405180910390fd5b60015460405163d47eed4560e01b81526000916001600160a01b03169063d47eed459061034090859060040161093a565b602060405180830381865afa15801561035d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038191906109cc565b600154604051631df3cbc560e31b81529192506001600160a01b03169063ef9e5e289083906103b490869060040161093a565b6000604051808303818588803b1580156103cd57600080fd5b505af11580156103e1573d6000803e3d6000fd5b50506001546040516396834ad360e01b81527fc96458d393fe9deb7a7d63a0ac41e2898a67a7750dbd166673279e06c868df0a600482018190529450600093506001600160a01b0390911691506396834ad390602401608060405180830381865afa158015610454573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047891906109e5565b604080518082019091528151600781900b825260609092015160209091018190526003805467ffffffffffffffff191667ffffffffffffffff9093169290921790915560045550505050565b60006104ce6105cb565b604051600090339047908381818185875af1925050503d8060008114610510576040519150601f19603f3d011682016040523d82523d6000602084013e610515565b606091505b50909250505090565b6105266105cb565b61052e610625565b565b6105386105cb565b61052e600061067a565b61054a6105cb565b61052e6106ca565b61055a6105cb565b6001600160a01b0381166105bf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610306565b6105c88161067a565b50565b6000546001600160a01b0316331461052e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610306565b61062d61070d565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6106d261075d565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861065d3390565b600054600160a01b900460ff1661052e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610306565b600054600160a01b900460ff161561052e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610306565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156107e9576107e96107aa565b604052919050565b6000602080838503121561080457600080fd5b823567ffffffffffffffff8082111561081c57600080fd5b8185019150601f868184011261083157600080fd5b823582811115610843576108436107aa565b8060051b6108528682016107c0565b918252848101860191868101908a84111561086c57600080fd5b87870192505b838310156108fc5782358681111561088a5760008081fd5b8701603f81018c1361089c5760008081fd5b888101356040888211156108b2576108b26107aa565b6108c3828901601f19168c016107c0565b8281528e828486010111156108d85760008081fd5b828285018d83013760009281018c0192909252508352509187019190870190610872565b9a9950505050505050505050565b60006020828403121561091c57600080fd5b81356001600160a01b038116811461093357600080fd5b9392505050565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b838110156109be57888603603f1901855282518051808852835b81811015610997578281018a01518982018b0152890161097c565b508781018901849052601f01601f1916909601870195509386019391860191600101610962565b509398975050505050505050565b6000602082840312156109de57600080fd5b5051919050565b6000608082840312156109f757600080fd5b6040516080810167ffffffffffffffff8282108183111715610a1b57610a1b6107aa565b81604052845191508160070b8214610a3257600080fd5b9082526020840151908082168214610a4957600080fd5b5060208201526040830151600381900b8114610a6457600080fd5b6040820152606092830151928101929092525091905056fea26469706673582212202e01cd9462616fa997bc38e2845b7580bf787d9a2f1820ec07415491eea1b63564736f6c63430008120033",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/SmartOracle.sol:SmartOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/SmartOracle.sol:SmartOracle",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 506,
        "contract": "contracts/SmartOracle.sol:SmartOracle",
        "label": "_pyth",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPyth)435"
      },
      {
        "astId": 509,
        "contract": "contracts/SmartOracle.sol:SmartOracle",
        "label": "tokenIds",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)248_storage"
      },
      {
        "astId": 514,
        "contract": "contracts/SmartOracle.sol:SmartOracle",
        "label": "currentPrice",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Price)503_storage"
      },
      {
        "astId": 516,
        "contract": "contracts/SmartOracle.sol:SmartOracle",
        "label": "vrfCoordinatorV2",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPyth)435": {
        "encoding": "inplace",
        "label": "contract IPyth",
        "numberOfBytes": "20"
      },
      "t_int64": {
        "encoding": "inplace",
        "label": "int64",
        "numberOfBytes": "8"
      },
      "t_struct(Counter)248_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 247,
            "contract": "contracts/SmartOracle.sol:SmartOracle",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Price)503_storage": {
        "encoding": "inplace",
        "label": "struct SmartOracle.Price",
        "members": [
          {
            "astId": 500,
            "contract": "contracts/SmartOracle.sol:SmartOracle",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_int64"
          },
          {
            "astId": 502,
            "contract": "contracts/SmartOracle.sol:SmartOracle",
            "label": "lastUpdateTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}